# # Disable user-scheduler when using non-local storage
# # provisioners.
# # The user-scheduler provided by the deployment tries to
# # match the pod first on volumes that need to be mounted.
# # When using local storage this makes perfect sense. If a
# # new volume is needed, then it's allocated round-robin
# # more-or-less and the pod also stay more-or-less
# # distributed. However, since the user's volume is
# # now mountable on all nodes, they are tested in order
# # and the last agreeable node is selected. Hence, all pods
# # were being allocated to the same node: not good.
# # Disabling the userScheduler lets the default scheduler
# # for the cluster decide, which spreads them out amongst
# # all of the other pods on the cluster. Not perfectly
# # balanced but better than all on one.
scheduling:
  userScheduler:
    enabled: false
hub:
  baseUrl: "/azuread/"
  # # Basic template for a service
  # services:
  #   my-service:
  #     apiToken: "XXX"
  #     url: http://etc
  config:
    Authenticator:
      admin_users:
        - 'joshua l. phillips'
      enable_auth_state: True
    CryptKeeper:
      keys:
      - XXXXXXXXXX
    # # This method works, but user names are picked from
    # # essentiall personal names which are more potentially
    # # non-unique. Use the custom authenticator below to
    # # avoid this issue and select from the first part of
    # # the mtsu.edu or mtmail.mtsu.edu email address.
    # AzureAdOAuthenticator:
    #   client_id: 'XXXXXXXXX'
    #   client_secret: 'XXXXXXXXXX'
    #   oauth_callback_url: 'https://jupyterhub.cs.mtsu.edu/azuread/hub/oauth_callback'
    #   tenant_id: 'XXXXXXXXXX'
    # JupyterHub:
    #   authenticator_class: azuread
  extraConfig:
    azureADConfig: |
      """
      Custom Authenticator to use Azure AD with JupyterHub
      """

      import json
      import jwt
      import os
      import urllib

      from tornado.auth import OAuth2Mixin
      from tornado.log import app_log
      from tornado.httpclient import HTTPRequest, AsyncHTTPClient

      from jupyterhub.auth import LocalAuthenticator

      from traitlets import Unicode, default

      from oauthenticator.oauth2 import OAuthLoginHandler, OAuthenticator

      class AzureAdOAuthenticator(OAuthenticator):
          login_service = Unicode(
                      os.environ.get('LOGIN_SERVICE', 'Azure AD'),
                      config=True,
                      help="""Azure AD domain name string, e.g. My College"""
              )

          tenant_id = Unicode(config=True, help="The Azure Active Directory Tenant ID")

          @default('tenant_id')
          def _tenant_id_default(self):
              return os.environ.get('AAD_TENANT_ID', '')

          username_claim = Unicode(config=True)

          @default('username_claim')
          def _username_claim_default(self):
              return 'name'

          @default("authorize_url")
          def _authorize_url_default(self):
              return 'https://login.microsoftonline.com/{0}/oauth2/authorize'.format(self.tenant_id)

          @default("token_url")
          def _token_url_default(self):
              return 'https://login.microsoftonline.com/{0}/oauth2/token'.format(self.tenant_id)

          async def authenticate(self, handler, data=None):
              code = handler.get_argument("code")
              http_client = AsyncHTTPClient()

              params = dict(
                  client_id=self.client_id,
                  client_secret=self.client_secret,
                  grant_type='authorization_code',
                  code=code,
                  redirect_uri=self.get_callback_url(handler))

              data = urllib.parse.urlencode(
                  params, doseq=True, encoding='utf-8', safe='=')

              url = self.token_url

              headers = {
                  'Content-Type':
                  'application/x-www-form-urlencoded; charset=UTF-8'
              }
              req = HTTPRequest(
                  url,
                  method="POST",
                  headers=headers,
                  body=data  # Body is required for a POST...
              )

              resp = await http_client.fetch(req)
              resp_json = json.loads(resp.body.decode('utf8', 'replace'))

              # app_log.info("Response %s", resp_json)
              access_token = resp_json['access_token']

              id_token = resp_json['id_token']
              decoded = jwt.decode(id_token, verify=False)

              # userdict = {"name": decoded[self.username_claim]}
              user_unique_id = jwt.decode(resp_json['access_token'], verify=False)['unique_name'].split('@')[0]
              userdict = {"name": user_unique_id}
              userdict["auth_state"] = auth_state = {}
              auth_state['access_token'] = access_token
              # results in a decoded JWT for the user data
              # auth_state['user'] = decoded
              auth_state['user'] = decoded

              return userdict

      class LocalAzureAdOAuthenticator(LocalAuthenticator, AzureAdOAuthenticator):
          """A version that mixes in local system user creation"""
          pass

      def notebook_dir_hook(spawner):
          # Had to be careful here... don't want to overwrite other variables
          # stored in the env dictionary by other tools (like z2jh)
          # spawner.environment = {'NB_USER':spawner.user.name, 'NB_UID':'2000', 'NB_GID':'2000'}
          spawner.environment['NB_USER'] = spawner.user.name
          # spawner.environment['NB_UID'] = '2000'
          # spawner.environment['NB_GID'] = '2000'

      # from oauthenticator.azuread import AzureAdOAuthenticator
      c.JupyterHub.authenticator_class = AzureAdOAuthenticator
      c.Application.log_level = 'DEBUG'

      c.AzureAdOAuthenticator.tenant_id = 'XXXXXXXXXX'
      c.AzureAdOAuthenticator.oauth_callback_url = 'https://jupyterhub.cs.mtsu.edu/azuread/hub/oauth_callback'
      c.AzureAdOAuthenticator.client_id = 'XXXXXXXXXX'
      c.AzureAdOAuthenticator.client_secret = 'XXXXXXXXXX'
      # If you want to enforce username to match user (instead of jovyan)
      # and see other settings as well above, then uncomment this.
      # c.Spawner.pre_spawn_hook = notebook_dir_hook      # Custom variables added to relevant NB arguments...
singleuser:
  image:
    name: jlphillips/csci4850
    tag: 2022-05-01-k8s
    # name: jupyter/minimal-notebook
    # tag: latest
    # # Can help with debugging...
    # pullPolicy: Always
  uid: 0
  cmd: start-notebook.sh
  defaultUrl: "/lab"
  extraEnv:
    GRANT_SUDO: "yes"
  memory:
    limit: 32G
  storage:
    dynamic:
      storageClass: longhorn
    # # Only use this if setting NB_USER above...
    # homeMountPath: /home/{username}
    capacity: 5Gi
  networkPolicy:
    enabled: true
cull:
  timeout: 604800
proxy:
  secretToken: "XXXXXXXXXX"
  # # Only need to use ClusterIP if you want to allow interal
  # # cluster access only - the default (empty) values opens a
  # # NodePort on the LoadBalancer, but still needs an ingress
  # # route if you also want a reverse proxy (most-likely
  # # by using traefik), and this this would best be served
  # # via ClusterIP for security purposes.
  service:
    type: ClusterIP
  # # Alternatively, only a NodePort...
  #   type: NodePort
  # # Finally, you can request NP or LB to assign
  # # specific ports (I think)
  #   nodePorts:
  #     http: 30480
  #     https: 30455 
  https:
    enabled: false
    # # Only kept for memory - should deploy TLS termination
    # # in the traefik IngressRoute instead...
    # hosts:
    #   - jupyterhub.cs.mtsu.edu
    # type: secret
    # secret:
    #   name: jupyterhub-tls
